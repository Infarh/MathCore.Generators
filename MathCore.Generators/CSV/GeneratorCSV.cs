using System.Collections.Immutable;
using System.Text;

using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace MathCore.Generators.CSV;

[Generator]
public class GeneratorCSV : IIncrementalGenerator
{
    private static SourceText CreateAttribute() => SourceText.From($$"""
// Autogenerated source code at {{DateTime.Now:dd.MM.yyyy HH:mm:ss}}
namespace MathCore.Generators.CSV;

[System.AttributeUsage(System.AttributeTargets.Class)]
[System.Diagnostics.Conditional("MATHCORE_GENERATORS_DEBUG")] 
internal class CSVClassAttribute : System.Attribute
{
    public bool AsyncRead { get; set; }

    public bool AsyncWrite { get; set; }
}

[System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field)]
[System.Diagnostics.Conditional("MATHCORE_GENERATORS_DEBUG")]  
internal class CSVColumnAttribute : System.Attribute
{
    public int ColumnIndex { get; set; }
}
""", Encoding.UTF8);

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static c => c.AddSource("GeneratorCSV.Attribute.g.cs", CreateAttribute()));

        var classes = context.SyntaxProvider.CreateSyntaxProvider(
                static (n, _) => n is ClassDeclarationSyntax @class && @class.AttributeLists.ExistAttribute("CSVClass"),
                static (c, _) => c.Node as ClassDeclarationSyntax)
           .Where(static c => c is not null)
           .Select(static (c, _) => c!)
           .Collect();

        context.RegisterSourceOutput(context.CompilationProvider.Combine(classes), static (c, v) => Execute(c, v.Right, v.Left));
    }

    private static void Execute(SourceProductionContext Context, ImmutableArray<ClassDeclarationSyntax> Classes, Compilation Compilation)
    {
        if (Classes.IsDefaultOrEmpty)
            return;

        foreach (var class_syntax in Classes)
            Execute(class_syntax, Compilation, Context);
    }

    private static void Execute(ClassDeclarationSyntax Class, Compilation Compilation, SourceProductionContext Context)
    {
        var cancel = Context.CancellationToken;
        cancel.ThrowIfCancellationRequested();

        var model = Compilation.GetSemanticModel(Class.SyntaxTree);
        //var class_symbol = model.GetDeclaredSymbol(Class, cancel);

        if (!Class.IsPartial())
        {
            Context.Error("GenCSVErr001", "CSV", "CSV", "Класс должен иметь модификатор partial");
            return;
        }

        if (Class.IsStatic())
        {
            Context.Error("GenCSVErr002", "CSV", "CSV", "Класс не должен быть статическим");
            return;
        }

        var namespace_syntax = Class.GetNamespace();
        var namespace_name = namespace_syntax?.Name.ToString();

        var class_name = Class.Identifier.Text;
        var class_modifiers = Class.EnumAccessModifiers().JoinString(" ");

        var members = new List<ISymbol>();

        foreach (var member in Class.ChildNodes().OfType<MemberDeclarationSyntax>())
            switch (member)
            {
                case FieldDeclarationSyntax field_syntax when
                    FieldSelector(field_syntax, Context) &&
                    field_syntax.Declaration.Variables.First() is { } field_var_syntax &&
                    model.GetDeclaredSymbol(field_var_syntax, cancel) is IFieldSymbol field_symbol:

                    members.Add(field_symbol);
                    break;

                case PropertyDeclarationSyntax property_syntax when
                    PropertySelector(property_syntax, Context) &&
                    model.GetDeclaredSymbol(property_syntax, cancel) is { } property_symbol:

                    members.Add(property_symbol);
                    break;
            }

        if (members.Count == 0)
        {
            Context.Warning("GenCSVWarn010", "CSV", "CSV", "Отсутствуют члены для инициализации");
            return;
        }

        var source = new StringBuilder();
        source
           .Append("// Autogenerated source code at {0:dd.MM.yyyy HH:mm:ss}", DateTime.Now).LN()
           .Nullable()
           .Using("System")
           .Using("System.IO")
           .Using("System.Collections.Generic")
           .AppendLine();
        if (namespace_name is { Length: > 0 })
            source.Namespace(namespace_name).LN();

        if (class_modifiers is { Length: > 0 })
            source.Append(class_modifiers).Append(' ');
        source.Append("partial class {0}", class_name);
        source.Append("{").LN();

        source.Append("    public static IEnumerable<").Append(class_name).AppendLine("> ParseCSV(string FileName, int Header = 0, char Separator = ';') => ParseCSV(new FileInfo(FileName), Header, Separator);");

        source.AppendLine();

        source.Append("    public static IEnumerable<{0}> ParseCSV(FileInfo file, int Header = 0, char Separator = ';')", class_name).LN();
        source.Append("    {").LN();
        source.Append("        using var reader = file.OpenText();").LN();
        source.Append("        foreach(var item in ParseCSV(reader, Header, Separator))").LN();
        source.Append("            yield return item;").LN();
        source.Append("    }").LN();


        source.AppendLine();

        source.Append("    public static IEnumerable<{0}> ParseCSV(StreamReader reader, int Header = 0, char Separator = ';')", class_name).LN();
        source.Append("    {").LN();
        source.Append("        for(var header = Header; header > 0 && !reader.EndOfStream; header--)").LN();
        source.Append("            reader.ReadLine();").LN();
        source.AppendLine();
        source.Append("        var row_index = 0;").LN();
        source.Append("        while (!reader.EndOfStream)").LN();
        source.Append("        {").LN();
        source.Append("            if(reader.ReadLine() is not { Length: > 0 } line) continue;").LN();
        source.AppendLine();
        source.Append("            var items = line.Split(Separator);").LN();
        source.Append("            if(items.Length < {0}) continue;", members.Count).LN();
        source.AppendLine();

        var i = 0;
        foreach (var member in members)
            MakeVariable(source, i++, member);

        source.AppendLine();
        source.Append("            var value = new {0}", class_name).LN();
        source.Append("            {").LN();

        foreach (var member in members)
            source.Append("                {0} = value_{0},", member.Name).LN();

        source.Append("            };").LN();
        source.AppendLine();
        source.Append("            yield return value;").LN();
        source.Append("            row_index++;").LN();
        source.Append("        }").LN();
        source.Append("    }").LN();

        source.AppendLine();

        source.Append("    public static void WriteToCSV(IEnumerable<{0}> items, string FileName, char Separator = ';') => WriteToCSV(items, new FileInfo(FileName), Separator);", class_name).LN();

        source.AppendLine();

        source.Append("    public static void WriteToCSV(IEnumerable<{0}> items, FileInfo file, char Separator = ';')", class_name).LN();
        source.Append("    {").LN();
        source.Append("        using var writer = file.CreateText();").LN();
        source.Append("        WriteToCSV(items, writer, Separator);").LN();
        source.Append("    }").LN();

        source.AppendLine();

        source.Append("    public static void WriteToCSV(IEnumerable<{0}> items, StreamWriter writer, char Separator = ';')", class_name).LN();
        source.Append("    {").LN();
        source.Append("        foreach(var item in items)").LN();
        source.Append("        {").LN();

        var first_member_to_write = true;
        foreach (var member in members)
        {
            if (first_member_to_write)
                first_member_to_write = false;
            else
                source.Append("            writer.Write(Separator);").LN();
            source.Append("            writer.Write(item.{0});", member.Name).LN();
        }

        source.Append("            writer.WriteLine();").LN();
        source.Append("        }").LN();
        source.Append("    }").LN();
        source.Append("}").LN();


        //var debug_source_text = source.ToStringWithLineNumbers();
        var source_text = source.ToSource();
        Context.AddSource($"{class_name}.CSV.g.cs", source_text);
    }

    private static void MakeVariable(StringBuilder source, int i, ISymbol member)
    {
        var (type, name) = member switch
        {
            IFieldSymbol field => (field.Type, field.Name),
            IPropertySymbol property => (property.Type, property.Name),
            _ => throw new ArgumentOutOfRangeException(nameof(member), member, null)
        };

        if (type.Name == "String")
            source.Ident(3).Append("var value_{0} = items[{1}];", name, i).LN();
        else if (type.GetMembers("TryParse").OfType<IMethodSymbol>().Any(m => m.IsStatic && m.ReturnType.Name == "Boolean" && m.Parameters.Length == 2 && m.Parameters[0].Type.Name == "String"))
        {
            source.Ident(3).Append("if(!{0}.TryParse(items[{1}].Trim('\"', ' ', '\\t'), out var value_{2}))", type.ToDisplayString().TrimEnd('?'), i, name).LN();
            source.Ident(3).Append("    throw new FormatException($\"Параметр строки {{row_index}} с индексом {0} имел неверный формат\");", i).LN();
        }
        else
            source.Ident(3).Append("var value_{0} = ({1})Convert.ChangeType(items[{2}], typeof({1}));", name, type.ToDisplayString().TrimEnd('?'), i).LN();
    }

    private static bool FieldSelector(FieldDeclarationSyntax field, SourceProductionContext Context)
    {
        if (field.Modifiers.Any(static m => m.ValueText is "static"))
        {
            if (!field.AttributeLists.ExistAttribute("CSVColumn"))
                return false;

            var static_modifier = field.Modifiers.First(static m => m.ValueText is "static");

            Context.Error("GenCSVErr003", "Генератор CSV", "CSV", "Поле не должно быть статическим", static_modifier.GetLocation());
            //var descriptor = new DiagnosticDescriptor(
            //    id: "GenCSVWarn003",
            //    title: "Генератор CSV",
            //    messageFormat: "Поле не должно быть статическим",
            //    category: "CSV",
            //    defaultSeverity: DiagnosticSeverity.Error,
            //    isEnabledByDefault: true);

            //Context.ReportDiagnostic(Diagnostic.Create(descriptor, static_modifier.GetLocation()));

            return false;
        }

        if (field.Declaration.Variables.Skip(1).Any())
        {
            if (!field.AttributeLists.ExistAttribute("CSVColumn"))
                return false;

            var other_field = field.Declaration.Variables.Skip(1).First();

            Context.Error("GenCSVErr004", "Генератор CSV", "CSV", "Множественное объявление полей недопустимо", other_field.GetLocation());
            //var descriptor = new DiagnosticDescriptor(
            //    id: "GenCSVWarn004",
            //    title: "Генератор CSV",
            //    messageFormat: "Множественное объявление полей недопустимо",
            //    category: "CSV",
            //    defaultSeverity: DiagnosticSeverity.Error,
            //    isEnabledByDefault: true);

            //Context.ReportDiagnostic(Diagnostic.Create(descriptor, other_field.GetLocation()));
        }

        return field.AttributeLists.ExistAttribute("CSVColumn");

    }

    private static bool PropertySelector(PropertyDeclarationSyntax property, SourceProductionContext Context)
    {
        if (property.Modifiers.Any(static m => m.ValueText is "static"))
        {
            if (property.AttributeLists.ExistAttribute("CSVColumn"))
            {
                var static_modifier = property.Modifiers.First(static m => m.ValueText is "static");

            Context.Error("GenCSVErr005", "Генератор CSV", "CSV", "Свойство не должно быть статическим", static_modifier.GetLocation());
                //var descriptor = new DiagnosticDescriptor(
                //    id: "GenCSVWarn005",
                //    title: "Генератор CSV",
                //    messageFormat: "Свойство не должно быть статическим",
                //    category: "CSV",
                //    defaultSeverity: DiagnosticSeverity.Error,
                //    isEnabledByDefault: true);

                //Context.ReportDiagnostic(Diagnostic.Create(descriptor, static_modifier.GetLocation()));
            }

            return false;
        }

        var is_readable = false;
        var is_writable = false;
        foreach (var accessors in property.DescendantNodes().OfType<AccessorDeclarationSyntax>())
            switch (accessors.Kind())
            {
                case SyntaxKind.GetAccessorDeclaration:
                    is_readable = true;
                    break;
                case SyntaxKind.InitAccessorDeclaration:
                case SyntaxKind.SetAccessorDeclaration:
                    is_writable = true;
                    break;
            }

        if (!is_readable)
        {
            var accessors_location = property.DescendantNodes().OfType<AccessorListSyntax>().First().GetLocation();

            Context.Error("GenCSVErr006", "Генератор CSV", "CSV", "Свойство иметь геттер", accessors_location);
            //Context.ReportDiagnostic(Diagnostic.Create(
            //    id: "GenCSVWarn006",
            //    category: "CSV",
            //    message: "Свойство иметь геттер",
            //    severity: DiagnosticSeverity.Error,
            //    defaultSeverity: DiagnosticSeverity.Error,
            //    isEnabledByDefault: true,
            //    warningLevel: 1,
            //    title: "CSV",
            //    location: accessors_location));

            return false;
        }

        if (!is_writable)
        {
            var accessors_location = property.DescendantNodes().OfType<AccessorListSyntax>().First().GetLocation();

            Context.Error("GenCSVErr007", "Генератор CSV", "CSV", "Свойство должно иметь сеттер, или инициализатор", accessors_location);
            //Context.ReportDiagnostic(Diagnostic.Create(
            //    id: "GenCSVWarn007",
            //    category: "CSV",
            //    message: "Свойство должно иметь сеттер, или инициализатор",
            //    severity: DiagnosticSeverity.Error,
            //    defaultSeverity: DiagnosticSeverity.Error,
            //    isEnabledByDefault: true,
            //    warningLevel: 1,
            //    title: "CSV",
            //    location: accessors_location));
            return false;
        }

        return property.AttributeLists.ExistAttribute("CSVColumn");
    }
}